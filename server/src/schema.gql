# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auth {
  id: String!
  username: String!
  email: String!
  hashedPassword: String!
  hashedToken: String
  isActivated: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  username: String!
  email: String!
  hashedPassword: String!
  hashedToken: String!
  isActivated: Boolean!
}

type SignResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type FitpassMember {
  id: String!
  name: String!
  category: String!
  start: DateTime!
  end: DateTime!
  employeeId: String!
  employee: Employee!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HealthCareMember {
  id: String!
  name: String!
  category: String!
  insurance: String!
  start: DateTime!
  end: DateTime!
  employeeId: String!
  employee: Employee!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Employee {
  id: String!
  fullName: String!
  jobTitle: String!
  phoneNumber: String!
  birthday: DateTime!
  contract: DateTime!
  eyes: DateTime!
  safety: DateTime!
  fire: DateTime!
  firstAid: DateTime!
  healthCareMembers: [HealthCareMember!]!
  fitpassMembers: [FitpassMember!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HealthcareStats {
  MediGroup: Int!
  DDOR: Int!
  WithoutHC: Int!
  totalEmployees: Int!
}

type JobTitles {
  jobTitle: String!
  count: Int!
  totalEmployees: Int!
}

type FitpassStats {
  Fitpass: Int!
  Without: Int!
  totalEmployees: Int!
}

type Payment {
  id: String!
  amount: Float!
  entryDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  employee: Employee
}

type Liability {
  id: String!
  amount: Float!
  recordedDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  employee: Employee
}

type Benefit {
  id: String!
  value: String!
  price: Float
  employeeDiscount: Float
}

type Jobs {
  id: String!
  value: String!
}

type Query {
  users: [Auth!]!
  user(username: String!): Auth!
  getAllEmployees: [Employee!]!
  getOneEmployee(id: String!): Employee!
  getEmployeesHealthcareStats: HealthcareStats!
  getEmployeesFitpassStats: FitpassStats!
  getJobTitleCounts: [JobTitles!]!
  paymentsByEmployee(employeeId: String!): [Payment!]!
  getAllPayments: [Payment!]!
  getTotalPaymentsByEmployee(employeeId: String!): Float!
  liabilitiesByEmployee(employeeId: String!): [Liability!]!
  getAllLiabilities: [Liability!]!
  getTotalLiabilities: Float!
  getTotalLiabilitiesByEmployee(employeeId: String!): Float!
  getAllHealthcareData: [Benefit!]!
  getAllFitpassData: [Benefit!]!
  getJobs: [Jobs!]!
}

type Mutation {
  signup(signUpInput: SignUpInput!): SignResponse!
  signin(signInInput: SignInInput!): SignResponse!
  updateUser(updateAuthInput: UpdateAuthInput!): Auth!
  removeUser(id: String!): Auth!
  createEmployee(data: EmployeeInput!): Employee!
  updateEmployee(id: String!, data: EmployeeInput!): Employee!
  deleteEmployee(id: String!): Employee!
  createPayment(data: PaymentInput!): Payment!
  updatePayment(id: String!, data: UpdatePaymentInput!): Payment!
  createLiability(data: LiabilityInput!): Liability!
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
}

input SignInInput {
  username: String!
  password: String!
}

input UpdateAuthInput {
  username: String
  email: String
  password: String
  id: String!
}

input EmployeeInput {
  fullName: String!
  jobTitle: String!
  phoneNumber: String!
  birthday: DateTime!
  contract: DateTime!
  eyes: DateTime!
  safety: DateTime!
  fire: DateTime!
  firstAid: DateTime!
  healthCareMembers: [HealthCareMemberInput!]!
  fitpassMembers: [FitpassMemberInput!]!
}

input HealthCareMemberInput {
  id: String!
  name: String!
  category: String!
  insurance: String!
  start: DateTime!
  end: DateTime!
}

input FitpassMemberInput {
  id: String!
  name: String!
  category: String!
  start: DateTime!
  end: DateTime!
}

input PaymentInput {
  employeeId: String!
  amount: Float!
  entryDate: DateTime!
}

input UpdatePaymentInput {
  amount: Float!
}

input LiabilityInput {
  employeeId: String!
  amount: Float!
  recordedDate: DateTime!
}