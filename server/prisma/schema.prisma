generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  email          String  @unique
  hashedPassword String
  hashedToken    String? @unique
  isActivated    Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Employee {
  id          String    @id @default(uuid())
  fullName    String
  jobTitle    String
  phoneNumber String?
  birthday    DateTime?
  contract    DateTime?

  eyes     DateTime?
  safety   DateTime?
  fire     DateTime?
  firstAid DateTime?

  cumulativeLiabilities Decimal   @default(0)
  lastCalculation       DateTime?

  healthCareMembers HealthCareMember[]
  fitpassMembers    FitpassMember[]
  payments          Payment[]
  Liabilities       Liability[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([fullName])
  @@index([eyes, safety, fire, firstAid])
}

model HealthCareMember {
  id         String    @id @default(uuid())
  name       String
  category   String
  insurance  String
  start      DateTime?
  end        DateTime?
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([end])
  @@index([employeeId])
}

model FitpassMember {
  id         String    @id @default(uuid())
  name       String
  category   String
  start      DateTime?
  end        DateTime?
  employeeId String
  employee   Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([end])
  @@index([employeeId])
}

model Payment {
  id         String   @id @default(uuid())
  amount     Decimal
  entryDate  DateTime @default(now())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([amount])
  @@index([amount, entryDate])
  @@index([employeeId])
  @@index([employeeId, amount])
}

model Liability {
  id           String   @id @default(uuid())
  amount       Decimal
  recordedDate DateTime @default(now())
  employeeId   String
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([amount])
  @@index([employeeId])
  @@index([employeeId, amount])
}

model HealthcareData {
  id               String @id @default(uuid())
  value            String
  price            Int
  employeeDiscount Int
}

model FitpassData {
  id               String @id @default(uuid())
  value            String
  price            Int
  employeeDiscount Int
}

model EmployeeJobTitle {
  id    String @id @default(uuid())
  value String @unique
}
